<HTML>
<HEAD>
<TITLE>Frames description</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../styles.css">
</HEAD>
<BODY>
	<DIV>
		<H1>FRAMES DESCRIPTION</H1>
		<P><B>Frames</B> are described in a separate <A href="../html/rdo_terms.htm#object">object</A> that is the basic object for the animation system. That object's extension is <FONT class="syntax">.frm</FONT>. A frame is a rectangular area on the screen where the displaying takes place. It consists of background picture and variable elements (displaying elements or sprites). The sprites composition, shape, size and position are determined by the system's state and, hence, may change while scanning the frame.</P>
		<P>Frame description has the following format:</P>
		<PRE class="syntax">$Frame <A class="syntax" href="#frm_name">&lt;frame_name&gt;</A>
[ Show_if <A class="syntax" href="#show_cond">&lt;frame_displaying_condition&gt;</A> ]
$Back_picture = <A class="syntax" href="#back_desc">&lt;background_picture_description&gt;</A>
[ <A class="syntax" href="#elem_desc">&lt;show_elements_description&gt;</A> ]
$End</PRE>
		<DL class="syntax">
			<DT class="syntax"><A name="frm_name"></A><I>frame_name</I></DT>
			<DD class="syntax">Frame name is a <A href="../html/rdo_lex_div_names.htm">simple name</A>. Names should be different for different frames, they should not coincide with any names determined before.</DD>
			<DT class="syntax"><A name="show_cond"></A><I>frame_displaying_condition</I></DT>
			<DD class="syntax">Frame displaying condition is used when changing the display contents automatically, it is a <A href="../html/rdo_base_equations.htm#log_expr">logical expression</A> calculated at every event. The frame is displayed if the logical expression is true, or not displayed otherwise. If at an event the logical expression changes its value, the frame appears on the screen or vanishes. The displaying condition with reserved word <FONT class="syntax">Show_if</FONT> may be absent. Frames with displaying condition given are called <B>conditional frames</B>. If conditions for displaying several frames are satisfied at certain state of the system modeled, then the first such frame encountered in frames description is displayed.
				<DL class="syntax">
					<DD class="syntax"><H4>Examples</H4><PRE class="samples">Show_if Time_now &gt; 0.2 and Time_now &lt;= 0.3</PRE></DD>
				</DL>
			<P>That conditional frame will be displayed if the model time is between 0.2 and 0.3. At the first event occurring after the system time exceeds 0.2, the frame will appear on the screen; at the first event after the system time exceeds 0.3 the frame will disappear.</P>
			</DD>
			<DT class="syntax"><A name="back_desc"></A><I>background_picture_description</I></DT>
			<DD class="syntax">Background picture description has the following format:
				<PRE class="syntax">[ <A class="syntax" href="#back_color">&lt;background_colour&gt;</A> ] (<A class="syntax" href="#frm_dim">&lt;frame_size&gt;</A> | <A class="syntax" href="#frm_file">&lt;background_picture_name&gt;</A>)</PRE>
				<DL class="syntax">
					<DT class="syntax"><A name="back_color"></A><I>background_colour</I></DT>
					<DD class="syntax">Background colour determines the colour of the <A href="#frame">frame</A> part situated beyond the background picture. The colour is determined with three integer <A href="../html/rdo_lex_div_numeric_const.htm">constants</A> separated with spaces, in angular parentheses. Each constant should be not less than 0 and not more than 255, they determine the intensity of three colour components: red, green and blue.
						<DL class="syntax">
							<DD class="syntax">
								<H4>Examples</H4>
								<PRE class="samples">&lt;0   0   0&gt;   - black
&lt;255 0   0&gt;   - red
&lt;0   255 0&gt;   - green
&lt;0   0   255&gt; - blue
&lt;255 255 0&gt;   - yellow
&lt;255 255 255&gt; - white
&lt;127 127 127&gt; - grey</PRE>
							</DD>
						</DL>
						<P>Background colour is not a compulsory parameter. If it is not determined, default value of &lt;0 100 0&gt; applies (that is dark green).</P>
					</DD>
					<DT class="syntax"><A name="frm_dim"></A><A name="frm_file"></A><I>frame_size, background_picture_name</I></DT>
					<DD class="syntax">For describing a background picture, either the name is given of the file containing that picture, or the picture's size. Background picture object should be a raster image saved in a device-independent bitmap format (BMP format). It has to have an extension .bmp.
						<P>There is another opportunity for building a background picture. The picture size is specified instead of object name. In that case, the RAO simulator itself creates the background picture that is a rectangle of the specified size of the background colour, bounded with one-pixel-thick black line. The size is determined with two integer constants. The first constant determines the picture width from 1 to 800, the second constant determines the picture height from 1 to 600.</P>
					</DD>
				</DL>
			</DD>
			<DT class="syntax"><A name="elem_desc"></A><I>show_elements_description</I></DT>
			<DD class="syntax">Image elements may be absent.
				<P>Image elements are divided into image sets. The sets may be <A name="cond_set"></A><A name="cond_set_shif"></A>conditional (the elements are only displayed when the displaying conditions are true) or <A name="no_cond_set"></A>unconditional.</P>
				<P><A name="cond_set"></A>Here is the format for describing a <B>conditional set</B>:</P>
				<PRE class="syntax">Show_if <A class="syntax" href="#elem_show_cond">&lt;displaying_condition&gt;</A>
  <A class="syntax" href="#elem">&lt;image_element&gt;</A> { &lt;image_element&gt; }</PRE>
				<P>The format for describing an <B>unconditional set</B>:</P>
				<PRE class="syntax">Show
  <A class="syntax" href="#elem">&lt;image_element&gt;</A> { &lt;image_element&gt; }</PRE>
				<P>There my be any number of conditional or unconditional sets in a frame, they may be positioned in any order. There may be any number of elements in a set, in any order too.</P>
				<DL class="syntax">
					<DT class="syntax"><A name="elem_show_cond"></A><I>displaying_condition</I></DT>
					<DD class="syntax">Display condition is a <A href="../html/rdo_base_equations.htm#log_expr">logical expression</A>.</DD>
					<DT class="syntax"><A name="elem"></A><I>image_element</I></DT>
					<DD class="syntax">An image element (sprite) has the following format:
						<PRE class="syntax"><A class="syntax" href="#elem_type">&lt;image_element_type&gt;</A> [ <A class="syntax" href="#elem_props">&lt;properties&gt;</A> ]</PRE>
						<DL class="syntax">
							<DT class="syntax"><A name="elem_type"></A><I>image_element_type</I></DT>
							<DD class="syntax">An element's type is determined with one of the following reserved words:
								<TABLE class="visible" cols="2" style="width: 80%">
									<TR valign="top">
										<TH align="left" width="20%">Element's type</TH>
										<TH align="left" width="80%">Description</TH>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">text</FONT></TD>
										<TD class="visible" width="80%">Text element</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">bitmap</FONT></TD>
										<TD class="visible" width="80%">Bit map</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">rect</FONT></TD>
										<TD class="visible" width="80%">Rectangle</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">line</FONT></TD>
										<TD class="visible" width="80%">Direct line interval</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">ellipse</FONT></TD>
										<TD class="visible" width="80%">Ellipse (circle)</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">r_rect</FONT></TD>
										<TD class="visible" width="80%">Rectangle with its corners rounded</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">triang</FONT></TD>
										<TD class="visible" width="80%">Triangle</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">s_bmp</FONT></TD>
										<TD class="visible" width="80%">Bit map scaled</TD>
									</TR>
								</TABLE>
							</DD>
							<DT class="syntax"><A name="elem_props"></A><I>properties</I></DT>
							<DD class="syntax">The record order, the element's properties number and sense depend on the element's type. Element's properties are written in square brackets and separated with commas.
								<P>The first two properties of an element of any type are its <B>coordinates</B>. These are the coordinates in pixels of the top left corner of the rectangle bounding the element. They are determined with <A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expressions</A>. The coordinates are relative, i.e. they are counted from the frame's top left corner down and to the right. If the arithmetic expression's value turns out to be of real type, the coordinate is rounded up.</P>
								<P>Many elements have properties of <B>size</B> (width and height in pixels) and <B>colour</B>. The size is determined by <A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expressions</A>, real values are rounded up to integer number of pixels. The colour is determined with three integer <A href="../html/rdo_lex_div_numeric_const.htm">constants</A> in angular parentheses, separated with spaces. Each constant has to be between 0 and 255 and determines the intensity of one of the three colour components: red, green and blue. A variety of more than sixteen million colours is available with different combinations of those three constants. The variety available in fact depends on the video-adapter and its operation mode. If the video-adapter is not able to display the colour required, then Windows system finds the nearest substitute among the colours available. <A name="transp"></A>Text elements and figures insides may be transparent. For that, it is necessary to use reserved word <FONT class="syntax">transparent</FONT> instead of describing the colour.</P>
								<P>When the model's state changes the expressions determining an element's coordinates and size may change too. So the element may move on the screen and change its size. If the element sticks out beyond the frame it is truncated automatically. The order of drawing the elements follows the order of describing them in the frame object, i.e. when elements are overlapped those described previously will be covered by those described later, partly or completely.</P>
							</DD>
						</DL>
						<P>Elements of various types are considered below.</P>
						<P>A <B>text element</B> (<FONT class="syntax">text</FONT>) has the following format:</P>
						<PRE class="syntax">text [ &lt;X-coordinate&gt;, &lt;Y-coordinate&gt;, &lt;width&gt;, &lt;height&gt;,
  &lt;background_colour&gt;, &lt;colour&gt;, [<A class="syntax" href="#place_method">&lt;positioning_method&gt;</A>] <A class="syntax" href="#contents">&lt;contents&gt;</A> ]</PRE>
						<DL class="syntax">
							<DT class="syntax"><A name="place_method"></A><I>positioning_method</I></DT>
							<DD class="syntax">The positioning method determines where the printed line (the element's contents) will be in the element's field. That method may be skipped, then the line will be left-justified. The positioning method is determined by one of the following symbols:
								<TABLE class="visible" cols="2" style="width: 80%">
									<TR valign="top">
										<TH align="left" width="20%">Positioning method</TH>
										<TH align="left" width="80%">Description</TH>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">&lt;</FONT></TD>
										<TD class="visible" width="80%">Left-justified</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">=</FONT></TD>
										<TD class="visible" width="80%">Center-justified</TD>
									</TR>
									<TR valign="top">
										<TD class="visible" NOWRAP width="20%"><FONT class="syntax">&gt;</FONT></TD>
										<TD class="visible" width="80%">Right-justified</TD>
									</TR>
								</TABLE>
								<P>If the line is longer than the element's width, the line is truncated.</P>
							</DD>
							<DT class="syntax"><A name="contents"></A><I>contents</I></DT>
							<DD class="syntax">An element's contents may be described by one of the following means:
								<UL>
									<LI><A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expression</A> (the line printed out is the result of calculating an arithmetic expression, integer, real or a name of enumerative type value);</LI>
									<LI><A href="../html/rdo_obj_const_fun_sec.htm">symbol constant</A> (the line printed is assigned the value of a string constant).</LI>
								</UL>
							</DD>
						</DL>
						<P>A <B>bit map</B> (<FONT class="syntax">bitmap</FONT>) has the following format:</P>
						<PRE class="syntax">bitmap [ &lt;X-coordinate&gt;, &lt;Y-coordinate&gt;,
  <A class="syntax" href="#bitmap">&lt;image_file_name&gt;</A> [ , <A class="syntax" href="#mask">&lt;mask_file_name&gt;</A> ] ]</PRE>
						<DL class="syntax">
							<DT class="syntax"><A name="bitmap"></A><A name="mask"></A><I>image_file_name, mask_file_name</I></DT>
							<DD class="syntax">To create a picture element as a bit image of some form, two objects are necessary: image object and mask object. Both objects must have hardware-independent bitmap format (BMP format). They may be created with a graphic editor software tool. The file names without their type are indicated in the element's properties description. The files must have extension .bmp.
								<P>An image file contains its element picture (sprite) against black background; the mask contains the sprite silhouette and is white against black background. The result of such combination of the image and the mask is that the sprite will be seen where the mask is black and the background with the element against it will be seen where the mask is white. Mask file may be absent. In this case the rectangular sprite from image file will be displayed on the background (i.e. if the mask is not specified the fully black mask is used).</P>
							</DD>
						</DL>
						<P><B>Scaled bit map</B> (<FONT class="syntax">s_bmp</FONT>) has the following format:</P>
						<PRE class="syntax">s_bmp [ &lt;X-coordinate&gt;, &lt;Y-coordinate&gt;, <A class="syntax" href="#width">&lt;width&gt;</A>, <A class="syntax" href="#height">&lt;height&gt;</A>,
  &lt;image_file_name&gt; [ , &lt;mask_file_name&gt; ] ]</PRE>
						<P>The description of that type of elements is similar to that of bit maps.</P>
						<DL class="syntax">
							<DT class="syntax"><A name="width"></A><A name="height"></A><I>width, height</I></DT>
							<DD class="syntax">Width and height are <A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expressions</A> written for calculating the element size.
								<P>The basic bit image stored in image and mask files is expanded or compressed along two axes independently, so that its dimensions become equal to the element's dimensions.</P>
							</DD>
						</DL>
						<P>A <B>rectangle</B> (<FONT class="syntax">rect</FONT>) has the following format:</P>
						<PRE class="syntax">rect [ &lt;X-coordinate&gt;, &lt;Y-coordinate&gt;, &lt;width&gt;, &lt;height&gt;,
  &lt;background_colour&gt;, &lt;colour&gt; ]</PRE>
						<P>That element depicts a rectangle of given size in given coordinates, with the boundary and the filling colours indicated. The rectangle sides are parallel to the coordinate axes. The boundary line is one pixel thick.</P>
						<P><B>Rectangles with rounded corners</B> (<FONT class="syntax">r_rect</FONT>) have the following format:</P>
						<PRE class="syntax">r_rect [ &lt;X-coordinate&gt;, &lt;Y-coordinate&gt;, &lt;width&gt;, &lt;height&gt;,
  &lt;background_colour&gt;, &lt;colour&gt; ]</PRE>
						<P>That element's description is similar to that of a rectangle. The only difference is that the corners are rounded as a circular arc with its radius equal to one half of the smallest of the two rectangle's dimensions.</P>
						<P>A <B>chunk of a direct line</B> (<FONT class="syntax">line</FONT>) has the following format:</P>
						<PRE class="syntax">line [ &lt;X-coordinate_1&gt;, &lt;Y-coordinate_1&gt;, &lt;X-coordinate_2&gt;,
  &lt;Y-coordinate_2&gt;, &lt;colour&gt; ]</PRE>
						<P>That element depicts a direct line interval of the given colour between two points with given coordinates. The line is one pixel thick.</P>
						<P>An <B>ellipse</B> (<FONT class="syntax">ellipse</FONT>) is described with the following format:</P>
						<PRE class="syntax">ellipse [ <A class="syntax" href="#x_coord">&lt;X-coordinate&gt;</A>, <A class="syntax" href="#y_coord">&lt;Y-coordinate&gt;</A>, <A class="syntax" href="#el_width">&lt;width&gt;</A>, <A class="syntax" href="#el_height">&lt;height&gt;</A>,
  &lt;background_colour&gt;, &lt;colour&gt; ]</PRE>
						<P>That element depicts an ellipse in given coordinates with given axes lengths, given filling colour and given boundary line colour. The ellipse axes are parallel to coordinate axes.</P>
						<DL class="syntax">
							<DT class="syntax"><A name="x_coord"></A><A name="y_coord"></A><I>X-coordinate, Y-coordinate</I></DT>
							<DD class="syntax">The coordinates determine the top left corner of the rectangle the ellipse is inscribed into.</DD>
							<DT class="syntax"><A name="el_width"></A><A name="el_height"></A><I>width, height</I></DT>
							<DD class="syntax">The ellipse width is its size along X axis and its height is its size along Y axis.</DD>
						</DL>
						<P>The boundary line is one pixel thick.</P>
						<P>A <B>triangle</B> (<FONT class="syntax">triang</FONT>) has the following format:</P>
						<PRE class="syntax">triang [ &lt;X-coordinate_1&gt;, &lt;Y-coordinate_1&gt;, &lt;X-coordinate_2&gt;,
  &lt;Y-coordinate_2&gt;, &lt;X-coordinate_3&gt;, &lt;Y-coordinate_3&gt;,
  &lt;background_colour&gt;, &lt;colour&gt; ]</PRE>
						<P>A triangle is determined with the coordinates of its three vertices. Like for rectangles and ellipses, the triangle's inside may be either transparent or coloured. The triangle boundary is depicted with a one-pixel-thick line of given colour.</P>
					</DD>
				</DL>
				<P><BR><A name="active"></A><B>Active area</B> is an image element not visible on the screen.</P>
				<P>Active area description format is similar to that of <A href="#elem">image elements</A>; it is given below:</P>
				<PRE class="syntax">active <A class="syntax" href="#keyb_name">&lt;keyboard_operation_name&gt;</A> [ &lt;X-coordinate&gt;,
  &lt;Y-coordinate&gt;, &lt;width&gt;, &lt;height&gt; ]</PRE>
				<DL class="syntax">
					<DT class="syntax"><A name="keyb_name"></A><I>keyboard_operation_name</I></DT>
					<DD class="syntax">The name of the <A href="../html/rdo_obj_pat.htm#pat_type">keyboard operation</A> that will be initiated once mouse button is pressed.</DD>
				</DL>
				<P><A name="active"></A>The active area is a rectangle with its top left corner located at &lt;X-coordinate&gt;, &lt;Y-coordinate&gt; and dimensions of &lt;width&gt; and &lt;height&gt;. The area's coordinates and dimensions are determined by <A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expressions</A>, hence the area may change its location and size when the values of these expressions are changed.</P>
				<P>An active area may be determined at any place where visible <A href="#elem">image elements</A> are possible. It may be part of <A href="#no_cond_set">unconditional</A> or <A href="#cond_set">conditional</A> image sets. In the latter case the area is only active when the set <A href="#elem_show_cond">display conditions</A> are satisfied.</P>
			</DD>
		</DL>
		<H4>Examples</H4>
		<PRE class="samples">$Frame Frame_1
$Back_picture = <0 255 255> animbg
Show
  triang   [ System1.X_coord1, System1.Y_coord1,
           System1.X_coord2, System1.Y_coord2,
           System1.X_coord3, System1.Y_coord3, &lt;255  0   0&gt;, 
           &lt;255 255 0&gt; ]
  text     [ System2.X_coord1, System2.Y_coord1, 100, 20,
           transparent, &lt;255 255 0&gt;, 'Hello everybody!' ]
  ellipse  [ System2.X_coord1, System2.Y_coord1, 50, 50,
           &lt;0  0 255&gt;, &lt;255 255 0&gt; ]
  r_rect   [ System2.X_coord3 - 30, System2.Y_coord3 -
           20, 60, 40, &lt;255  255  255&gt;, &lt;255  0  255&gt; ]
  bitmap   [ System3.X_coord1 - 20,System3.Y_coord1 - 20,
           face1, face1m ]
  s_bmp    [ System3.X_coord2 - 20,System3.Y_coord2 - 20,
           System3.X_coord2 / 5, System3.Y_coord2 / 5,
           ring, ringm ]
  line     [ System3.X_coord3, System3.Y_coord3,
           System3.X_coord2, System3.Y_coord2, 
           &lt;255 255 255&gt; ]
Show_if System2.X_coord2 &gt; 30 and System2.Y_coord2 &gt; 30
        and  System2.X_coord2 &lt; X_size-30 and 
        System2.Y_coord2 &lt; Y_size - 30
  ellipse  [ System2.X_coord2 - 30, System2.Y_coord2 - 
           30, 60, 60, &lt;0  255  255&gt;, &lt;0  0  255&gt; ]
Show_if System2.X_coord2 &gt;= 0 and System2.X_coord2 &lt;= 30
  ellipse  [ 0, System2.Y_coord2 - 30, System2.X_coord2 *
           2, 60, &lt;0  255  255&gt;, &lt;0  0  255&gt; ]
Show_if System2.Y_coord2 &gt;= 0 and System2.Y_coord2 &lt;= 30
  ellipse  [ System2.X_coord2 - 30, 0, 60, System2.Y_coord2
           * 2, &lt;0  255  255&gt;, &lt;0  0  255&gt; ]
$End</PRE>
	<H4>See Also</H4>
	<P><A href="../html/rdo_obj_pat.htm">Patterns description</A></P>
	<P><A href="../html/rdo_obj_opr.htm">Operations description</A></P>
	</DIV>
	<A name="prev_section;../html/rdo_obj_const_fun_sec.htm;Symbol constants, functions and sequences description">
	<A name="next_section;../html/rdo_res_intro.htm;Simulation results">
	<A name="section_top;../html/rdo_obj_intro.htm;Certain constructions of the language">
	<A name="section;Certain constructions of the language;">
	<A name="prev_topic;../html/rdo_obj_dpt.htm;Decision points description">
	<A name="next_topic;../html/rdo_obj_pmd.htm;Performance measures description object">
	<A name="title;RAO language help"><BR><SCRIPT src="../navbar.js"></SCRIPT>
</BODY>
</HTML>