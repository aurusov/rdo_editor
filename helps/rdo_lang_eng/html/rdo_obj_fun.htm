<HTML>
<HEAD>
<TITLE>Function syntax</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../styles.css">
</HEAD>
<BODY>
	<DIV>
		<H1>FUNCTION SYNTAX</H1>
		<P><B>Function description</B> follow constant description in a <A href="../html/rdo_obj_const_fun_sec.htm">symbol constants, functions and sequences description object</A> (with extension <FONT class="syntax">.fun</FONT>). The following format is used for describing functions:</P>
		<PRE class="syntax">$Function <A class="syntax" href="#fun_name">&lt;function_name&gt;</A> : <A class="syntax" href="#val_type">&lt;function_value_type&gt;</A>
$Type = <A class="syntax" href="#fun_type">&lt;function_type&gt;</A>
$Parameters
<A class="syntax" href="#param_desc">&lt;function_parameter_description&gt;</A> { &lt;function_parameter_description&gt; }
$Body <A class="syntax" href="#body">&lt;function_body&gt;</A> $End</PRE>
		<DL class="syntax">
			<DT class="syntax"><A name="fun_name"></A><I>function_name</I></DT>
			<DD class="syntax">A function name is a <A href="../html/rdo_lex_div_names.htm">simple name</A>. Names should be different for different functions; they should not coincide with any names defined before.</DD>
			<DT class="syntax"><A name="val_type"></A><I>function_value_type</I></DT>
			<DD class="syntax">A function value type is one of the <A href="../html/rdo_base_types.htm">data types</A> allowed in the language. When describing function value types, references are allowed on <A href="../html/rdo_base_res_types.htm#param_type">resource parameter types</A> or <A href="../html/rdo_obj_const_fun_sec.htm#const_type">symbol constant types</A>. When describing a function value type, default values may be indicated too, but that opportunity is never used except functions of list type.</DD>
			<DT class="syntax"><A name="fun_type"></A><I>function_type</I></DT>
			<DD class="syntax">In the language version presented here, functions of the following types are determined:
				<TABLE class="visible">
					<TR valign="top">
						<TH align="left" width="20%">Function type</TH>
						<TH align="left" width="80%">Description</TH>
					</TR>
					<TR valign="top">
						<TD class="visible" NOWRAP width="20%"><FONT class="syntax">algorithmic</FONT></TD>
						<TD class="visible" width="80%">A function of algorithmic type</TD>
					</TR>
					<TR valign="top">
						<TD class="visible" NOWRAP width="20%"><FONT class="syntax">table</FONT></TD>
						<TD class="visible" width="80%">A function of table type</TD>
					</TR>
					<TR valign="top">
						<TD class="visible" NOWRAP width="20%"><FONT class="syntax">list</FONT></TD>
						<TD class="visible" width="80%">A function of list type</TD>
					</TR>
				</TABLE>
				<P>A function of list type is a list of parameter values and the corresponding function values. A function of table type is a table of the function values. An algorithmic function is a set of conditions and formulas that are used for calculating the function value.</P>
			</DD>
			<DT class="syntax"><A name="param_desc"></A><I>function_parameter_description</I></DT>
			<DD class="syntax">The following format is used for describing a function's parameter:<BR>
				<PRE class="syntax"><A class="syntax" href="#param_name">&lt;function_parameter_name&gt;</A> : <A class="syntax" href="#param_type">&lt;parameter_type&gt;</A></PRE>
				<DL class="syntax">
					<DT class="syntax"><A name="param_name"></A><I>function_parameter_name</I></DT>
					<DD class="syntax">A function parameter name is a <A href="../html/rdo_lex_div_names.htm">simple name</A>. For different parameters, names should be different; they should not coincide with any names defined before.</DD>
					<DT class="syntax"><A name="param_type"></A><I>parameter_type</I></DT>
					<DD class="syntax">A parameter type is one of the data types allowed. When describing function parameter types, references are allowed on <A href="../html/rdo_base_res_types.htm#param_type">resource parameter types</A> or <A href="../html/rdo_obj_const_fun_sec.htm#const_type">symbol constant types</A>. There are no values by default.</DD>
				</DL>
			</DD>
			<BR>
			<P><BR><A name="call"></A><B>Calling a function</B> has the following format:</P>
			<PRE class="syntax">&lt;function_name&gt; ( <A class="syntax" href="#call_expr">&lt;arithmetic_expression&gt;</A> { , &lt;arithmetic_expression&gt; } )</PRE>
			<DL class="syntax">
				<DT class="syntax"><A name="call_expr"></A><I>arithmetic_expression</I></DT>
				<DD class="syntax">After the function's name, <A href="../html/rdo_base_equations.htm#arith_expr">arithmetic expressions</A> are written between parentheses, separated with commas. The order of these expressions is determined by the order of the parameters in the function description. An arithmetic expression type should correspond with the relevant parameter type. For real parameters, integer expressions are allowed.</DD>
			</DL>
			<BR>
			<DT class="syntax"><A name="body"></A><I>function_body</I></DT>
			<DD class="syntax">Function body syntax depends on the function type.
				<P><BR>For a <B>function of list type</B>, the body is described in the following format:</P>
				<PRE class="syntax"><A class="syntax" href="#list_param_val">&lt;parameter_values&gt;</A> = <A class="syntax" href="#list_fun_val">&lt;function_value&gt;</A>
{ &lt;parameter_values&gt; = &lt;function_value&gt; }</PRE>
				<DL class="syntax">
					<DT class="syntax"><A name="list_param_val"></A><I>parameter_values</I></DT>
					<DD class="syntax">Function parameter values have to be separated with at least one <A href="../html/rdo_lex_div_intro.htm">separator</A>. The order of writing parameter values is determined by the order of describing the function's parameters. A parameter value is defined with either real or integer <A href="../html/rdo_lex_div_numeric_const.htm">constant</A>, or with the value's name according to the value's type.</DD>
					<DT class="syntax"><A name="list_fun_val"></A><I>function_value</I></DT>
					<DD class="syntax">Real or integer <A href="../html/rdo_lex_div_numeric_const.htm">constant</A> or the value's name according to the function value type determines a function's value.</DD>
				</DL>
				<P>The user describes all possible function's values and the corresponding combinations of the parameters values. When calculating the function, the parameter values are determined, then their relevant combination is detected in the function body, and then the function is assigned the value corresponding with that combination. If there is no such parameter combination in the function body as the combination calculated when calling the function, then the function is assigned its default value determined by the function type description. For that reason, it is compulsory to specify default value when describing value type for a list function.</P>
				<P>If there is an allowed range of values in the function type description, then it will be checked whether the function values are within that range when reading the function body.</P>
				<DL class="syntax">
					<DD class="syntax"></DD>
					<H4>Examples</H4>
					<PRE class="samples">$Function List_1 : such_as Constant_9 = Value_2
$Type = list
$Parameters
  Parameter_1 : such_as Constant_5
  Parameter_2 : integer
$Body
  Free       12    = Value_3
  Busy       41    = Value_1
  Unloading   3    = Value_4
  Free       54    = Value_2
  Loading    22    = Value_5
  Unloading   9    = Value_4
  Busy       18    = Value_1
$End</PRE>
					<P>Here are some examples of calling the function and of the values returned:</P>
					<PRE class="samples">List_1(Busy, 40 + 1) = Value_1
List_1(Loading, 22)  = Value_5
List_1(Free, 4)      = Value_2  (by default)</PRE>
				</DL>
				<P><BR>When describing a <B>function of table type</B>, all the parameters should either be integer with their allowed range compulsorily specified, or enumerative. For integer parameters, the bottom range boundary should always be 1. That is necessary for determining the number of values in the table and calculating correctly a value's number in a line.</P>
				<P>Table function body is a set of the function values for each combination of its parameters values. The values in the function body are defined with integer or real <A href="../html/rdo_lex_div_numeric_const.htm">constants</A> or with the value name according to the function value type. They are separated with at least one <A href="../html/rdo_lex_div_intro.htm">separator</A>. In multi-dimensioned tables (when the function has more than one parameter) the values are positioned as follows: first there are the values corresponding with increasing values of the first parameter/index, then the same for the second one and so forth.</P>
				<P>If allowed values range is specified in the function type description, then while reading the function body it will be checked whether the function's values are within that range.</P>
				<DL class="syntax">
					<DD class="syntax"></DD>
					<H4>Examples</H4>
					<P>There are comments in function bodies to explain the order of values.</P>
					<PRE class="samples">$Function Table_1 : such_as Constant_9
$Type = table
$Parameters
  Parameter_1 : integer [1..8]
$Body
  Value_3 Value_5 Value_2 Value_4  {Parameter_1 = 1..4}
  Value_1 Value_2 Value_5 Value_1  {Parameter_1 = 5..8}
$End

$Function Table_2 : integer [0..80]
$Type = table
$Parameters
  Parameter_1 : such_as Constant_9
  Parameter_1 : integer [1..4]
$Body
  { Parameter_1 = Value_1 Value_2 Value_3 Value_4 Value_5 }
  { Parameter_2 }
  { 1 }              1       19      58      36      6
  { 2 }              1       19      58      39      9
  { 3 }              1       19      58      42      12
  { 4 }              1       19      58      45      15
$End

$Function Table_3 : real
$Type = table
$Parameters
  Parameter_1 : such_as Constant_9
  Parameter_2 : integer [1..2]
  Parameter_3 : integer [1..2]
$Body
  { Parameter_3 = 1 }
  { Parameter_1 = Value_1 Value_2 Value_3 Value_4 Value_5 }
  { Parameter_2 }
  { 1 }             0.12    0.18    0.72    0.53    0.24
  { 2 }             0.85    0.64    0.92    0.16    0.38
  { Parameter_3 = 2 }
  { Parameter_1 = Value_1 Value_2 Value_3 Value_4 Value_5 }
  { Parameter_2 }
  { 1 }             0.64    0.02    0.52    0.73    0.63
  { 2 }             0.10    0.43    0.95    0.74    0.27
$End</PRE>
					<P>Examples of calling functions and returning their values:</P>
					<PRE class="samples">Table_1(2) = Value_5
Table_1(2 * 5 - 4) = Value_2
Table_2(Value_4, 2) = 39
Table_2(Value_5, 1) = 6
Table_3(Value_4, 1, 1) = 0.53
Table_3(Value_2, 2, 1) = 0.64
Table_3(Value_3, 2, 2) = 0.95</PRE>
				</DL>
				<P><BR>An <A name="alg"></A><B>algorithmic function</B> body has a format as follows:</P>
				<PRE class="syntax">Calculate_if &lt;logical_expression&gt;
&lt;function_name&gt; = &lt;arithmetic_expression&gt;
{ Calculate_if &lt;logical_expression&gt;
&lt;function_name&gt; = &lt;arithmetic_expression&gt; }</PRE>
				<P>The body is a sequence of conditional operators specifying <A href="../html/rdo_base_equations.htm#log_expr">expressions</A> for calculating the function values when the relevant conditions are satisfied.</P>
				<P>An algorithmic function value is calculated as follows. Logic expressions in the function body are scanned and their values calculated in the order they have been described. If some value is FALSE, then the next logic expression is calculated. If it is TRUE, then the function value is returned as the result of calculating the relevant arithmetic expression. If every logic expression turns out FALSE, the function value is not determined.</P>
				<P>The arithmetic expressions may call other functions for the calculations, and the called function itself may be called recursively. Symbol constants and sequences may be operands for these expressions too.</P>
				<DL class="syntax">
					<DD class="syntax"></DD>
					<H4>Examples</H4>
					<PRE class="samples">$Function Function_1 : real
$Type = algorithmic
$Parameters
  Parameter_1 : integer
  Parameter_2 : real
$Body
  Calculate_if Parameter_1 &lt;= 6 Function_1 = Parameter_1 * Parameter_2
  Calculate_if Parameter_1 &gt; 6  Function_1 = 1.0 + Parameter_2
$End

$Function Function_2 : (Green, Yellow, Red)
$Parameters
  Parameter_1 : real
$Body
  Calculate_if Parameter_1 &lt;= 10.0 Function_2 = Green
  Calculate_if Parameter_1 &gt; 10.0 and Parameter_1 &lt;= 20.0 Function_2 = Yellow
  Calculate_if Parameter_1 &gt; 20.0 Function_2 = Red
$End</PRE>
					<P>Examples of calling functions and returning their values:</P>
					<PRE class="samples">Function_1(2, 10.0 / 2) = 10.0
Function_1(8, 1.0 * 3 - 1.0) = 3.0
Function_2(5.64) = Green
Function_2(12.6) = Yellow</PRE>
				</DL>
			</DD>
		</DL>
		<H4>See Also</H4>
		<P><A href="../html/rdo_base_types.htm">Data types. Types correspondence</A></P>
		<P><A href="../html/rdo_obj_const_fun_sec.htm">Symbol constants, functions and sequences description</A></P>
		<P><A href="../html/rdo_obj_sec.htm">Sequence syntax</A></P>
	</DIV>
	<A name="prev_section;../html/rdo_obj_intro.htm;Certain constructions of the language">
	<A name="next_section;../html/rdo_res_intro.htm;Simulation results">
	<A name="section_top;../html/rdo_obj_const_fun_sec.htm;Symbol constants, functions and sequences description">
	<A name="section;Symbol constants, functions and sequences description;">
	<A name="prev_topic;../html/rdo_obj_const_fun_sec.htm;Symbol constants, functions and sequences description">
	<A name="next_topic;../html/rdo_obj_sec.htm;Sequence syntax">
	<A name="title;RAO language help"><BR><SCRIPT src="../navbar.js"></SCRIPT>
</BODY>
</HTML>
