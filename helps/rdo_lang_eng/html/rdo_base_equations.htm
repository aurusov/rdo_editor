<HTML>
<HEAD>
<TITLE>Arithmetic and logical expressions</TITLE>
<LINK rel = "stylesheet" type = "text/css" href = "../styles.css">
</HEAD>
<BODY>
	<DIV>
		<H1>ARITHMETIC AND LOGICAL EXPRESSIONS</H1>
		<P><A name="arith_expr"></A>In the language version presented here, <B>arithmetic expressions</B> may be of integer, real or enumerative type. Integer and real expressions contain operands, signs of arithmetic operations and round brackets.</P>
		<P><A name="oper"></A><B>Operands</B> in an arithmetic expression may be:</P>
		<UL>
			<LI><A href="../html/rdo_obj_const_fun_sec.htm#const_desc">numeric constants</A>;</LI>
			<LI><A href="../html/rdo_obj_const_fun_sec.htm#const_desc">symbolic constants</A>;</LI>
			<LI><A href="../html/rdo_base_std_var_func.htm">global variables and standard functions</A>;</LI>
			<LI><A href="../html/rdo_obj_fun.htm">functions</A>;</LI>
			<LI><A href="../html/rdo_obj_sec.htm">sequences</A>;</LI>
			<LI><A href="../html/rdo_base_res_types.htm">resource parameters</A>;</LI>
			<LI><A href="../html/rdo_obj_pat.htm">relevant resource parameters</A>;</LI>
			<LI><A href="../html/rdo_obj_pat.htm#param_desc">pattern parameters</A>;</LI>
			<LI><A href="../html/rdo_obj_fun.htm#param_desc">function parameters</A>.</LI>
		</UL>
		<P>An opportunity of using operands depends on the context. So function parameters may only be used in arithmetic expressions when describing algorithmic functions, and pattern or relevant resource parameters may be used when describing patterns.</P>
		<P><A name="operations"></A><A name="operations_plus"></A><A name="operations_minus"></A><A name="operations_star"></A><A name="operations_div"></A>In this version the following arithmetic operations are allowed in integer and real expressions: addition (+), subtraction (-), multiplication (*), division (/). The order an expression is calculated under is determined by the arithmetic operations priority and by the brackets. First what is written in brackets is calculated, then multiplication and division are performed, followed at last by addition and subtraction.</P>
		<P><A name="type"></A><B>The type of an arithmetic expression</B> is determined by the types of its operands. The latter are determined by the user when describing constants, functions, sequences, resource types, patterns. An expression belongs to integer type if all its operands are integer. If an expression includes only integer and real operands (at least one), then it belongs to real type. Expressions of enumerative type consist of only one enumerative operand or a name of an enumerative value. Arithmetic operations with enumerative operands are not determined.</P>
		<P>When calculating a value of an arithmetic expression, the type of the result of arithmetic operation will be integer if both operands are integer. If at least one operand is real, then the result will be real too. The result of dividing an integer by an integer belongs to integer type - that is the integer part of the real result. For example, the result of calculating 2 * (5 / 2) will be integer number 4 while 2 * (5.0 / 2) will be calculated as real number 5.0.</P>
		<H4>Exaples</H4>
		<PRE class="samples">1 + 3 + 5 + 7.0 = 16.0</PRE>
		<PRE class="samples">2 + 3 * 4 + 7 = 21</PRE>
		<PRE class="samples">(2 + 3) * (4 + 7) = 55</PRE>
		<PRE class="samples">2.0 * (3 * 4 + 7) = 38.0</PRE>
		<H4>Remarks</H4>
		<P class="remarks">When numerical constants are used as operands, they have to be separated from operation signs &quot;+&quot; or &quot;-&quot; with at least one separator. Otherwise these signs will be interpreted not as arithmetic operations but as the operands own signs.</P>
		<P><A name="log_expr"></A><B>Logical expressions</B> consist of arithmetic expressions united into pairs by relation operations, logical operations and square brackets.</P>
		<P><A name="rel_oper"></A><A name="rel_oper_eq"></A><A name="rel_oper_neq"></A><A name="rel_oper_great"></A><A name="rel_oper_less"></A><A name="rel_oper_greateq"></A><A name="rel_oper_lesseq"></A>Relation operations include:</P>
		<TABLE class="visible" style="width: 95.5%">
			<TR valign="top">
				<TH align=left width=20%>Operation</TH>
				<TH align=left width="80%">Meaning</TH>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>=</TD>
				<TD class="visible" width="80%">Equal</TD>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>&lt;&gt;</TD>
				<TD class="visible" width="80%">Not equal</TD>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>&lt;</TD>
				<TD class="visible" width="80%">Less</TD>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>&gt;</TD>
				<TD class="visible" width="80%">More</TD>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>&lt;=</TD>
				<TD class="visible" width="80%">Not more</TD>
			</TR>
			<TR valign="top">
				<TD class="visible" width=20%>&gt;=</TD>
				<TD class="visible" width="80%">Not less</TD>
			</TR>
		</TABLE>
		<P><A name="log_oper"></A>Logical operations include <FONT class="syntax">and</FONT> and <FONT class="syntax">or</FONT>. When calculating the value of a logical expression, arithmetic expressions are calculated first, then the results of relation operations, then at last logical operations are performed. In a relation operation, both arithmetic expressions must either be of one and the same type or one of them integer and the other real. If one of arithmetic expressions in a relation operation is real, then the second expression's value is converted to real type too. If both arithmetic expressions are integer, the relation operation is done on integer operands. Only operations of &quot;equal&quot; and &quot;not equal&quot; are allowed on enumerative expressions.</P>
		<P>The priority and the brackets determine the sequence of doing logical operations when calculating an expression. Expressions in the parentheses are calculated first, then AND operations are performed, then OR operations. Short calculating schema is used, i.e. not all the logical operands are calculated but only the ones necessary for obtaining the logical operation's result. So if the first operand in OR operation is TRUE, then the result will be TRUE no matter what the second operand is, and it is not necessary to calculate the second operand. Similarly, if in AND operation the first operand is FALSE, the result will be FALSE for any value of the second operand.</P>
		<H4>Examples</H4>
		<PRE class="samples">1 + 3 * 5 &lt;= 20 - TRUE</PRE>
		<PRE class="samples">1 + 3 * 5 &lt;= 20 and 1.0 &gt; 2 - FALSE</PRE>
		<PRE class="samples">2 * (5 / 2) = 2 * (5.0 / 2) - FALSE</PRE>
		<PRE class="samples">2 &gt;= 1 and 5 &lt;= 3 or 7 &lt;&gt; 5 - TRUE</PRE>
		<H4>See Also</H4>
		<P><A href="../html/rdo_base_types.htm">Data types. Types correspondence</A></P>
	</DIV>
	<A name="prev_section;../html/rdo_lex_div_intro.htm;Lexems and separators">
	<A name="next_section;../html/rdo_obj_intro.htm;Certain constructions of the language">
	<A name="section_top;../html/rdo_base_intro.htm;Primary constructions of RAO language">
	<A name="section;Primary constructions of RAO language;">
	<A name="prev_topic;../html/rdo_base_types.htm;Data types. Types correspondence">
	<A name="next_topic;../html/rdo_base_std_var_func.htm;Global variables and standard functions">
	<A name="title;RAO language help"><BR><SCRIPT src="../navbar.js"></SCRIPT>
</BODY>
</HTML>